<?xml version="1.0"?>

<precice-configuration>
  <!-- format for console output of precice -->
  <log>
    <sink type="stream" output="stdout"  filter='(%Severity% >= debug) and (not (%Function% = "advance"))' format="\033[0;33m%Rank% [precice]\033[0m %ColorizedSeverity%\033[0;33m%Message%\033[0m" enabled="true" />
    <!--<sink type="stream" output="stdout"  filter='%Severity% >= debug' format="\033[0;33m%Rank% [precice]\033[0m %ColorizedSeverity%\033[0;33m%Message%\033[0m" enabled="true" />-->
    <!--<sink type="file" output="debug.log" filter= "(%Severity% >= debug)" format="%Message%" enabled="true" />	-->
  </log>

  <solver-interface dimensions="3">
    
    <!-- Data fields that are exchanged between the solvers -->
    <data:vector name="Displacement"/>
    <data:vector name="Velocity"/>
    <data:vector name="Traction"/>

    <!-- A common mesh that uses these data fields -->
    <mesh name="TendonMeshLeft">
      <use-data name="Displacement"/>
      <use-data name="Velocity"/>
      <use-data name="Traction"/>
    </mesh>

    <mesh name="MuscleMeshLeft">
      <use-data name="Displacement"/>
      <use-data name="Velocity"/>
      <use-data name="Traction"/>
    </mesh>

    <!--The first participant is the master!! It has to be the tendon -->

    <participant name="TendonSolver"> 
      
      <!-- Makes the named mesh available to the participant. Mesh is provided by the solver directly. -->
      <use-mesh name="TendonMeshLeft" provide="yes"/>
      <use-mesh name="MuscleMeshLeft" from="MuscleSolverLeft"/>
      
      <!-- Define input/output of the solver, the mesh should be the own one.  -->
      <read-data name="Displacement"  mesh="TendonMeshLeft"/>
      <read-data name="Velocity"      mesh="TendonMeshLeft"/>
      <write-data  name="Traction"      mesh="TendonMeshLeft"/>
      <mapping:nearest-neighbor direction="read" from="MuscleMeshLeft" to="TendonMeshLeft" constraint="consistent"/>
      <export:vtk directory="preCICE-output" />
    </participant>

    <participant name="MuscleSolverLeft">

      <!-- Makes the named mesh available to the participant. Mesh is provided by the solver directly. -->
      <use-mesh name="MuscleMeshLeft"  provide="yes"/>
      <use-mesh name="TendonMeshLeft"     from="TendonSolver"/>
      
      <!-- Define input/output of the solver, the mesh should be the own one. -->
      <write-data  name="Displacement"  mesh="MuscleMeshLeft"/>
      <write-data  name="Velocity"      mesh="MuscleMeshLeft"/>
      <read-data name="Traction"      mesh="MuscleMeshLeft"/>
      <mapping:nearest-neighbor direction="read" from="TendonMeshLeft" to="MuscleMeshLeft" constraint="consistent"/>
      <export:vtk directory="preCICE-output" />
    </participant>
    
    <!-- Communication method, use TCP sockets, Change network to "ib0" on SuperMUC -->
    <m2n:sockets from="TendonSolver" to="MuscleSolverLeft" network="lo" />

    <coupling-scheme:serial-explicit>
      <!-- <participants first="MuscleSolverLeft" second="TendonSolver"/> -->
      <participants first="TendonSolver" second="MuscleSolverLeft"/>

      <max-time value="20.0"/>           <!-- end time of the whole simulation -->
      <time-window-size value="0.1"/>   <!-- timestep width for coupling -->

      <!-- <relative-convergence-measure limit="1e-2" data="Displacement" mesh="TendonMeshLeft" />  -->
  
      <!-- <acceleration:constant>
        <relaxation value="0.9"/>
      </acceleration:constant> -->


      <exchange data="Traction"        mesh="TendonMeshLeft"    from="TendonSolver" to="MuscleSolverLeft"/>
      <exchange data="Displacement"        mesh="MuscleMeshLeft" from="MuscleSolverLeft" to="TendonSolver"/>  <!--initialize="true"-->
      <exchange data="Velocity"        mesh="MuscleMeshLeft" from="MuscleSolverLeft" to="TendonSolver"/>  <!--initialize="true"-->
    </coupling-scheme:serial-explicit>
    
  </solver-interface>
</precice-configuration>