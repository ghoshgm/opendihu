<?xml version="1.0"?>

<precice-configuration>
  <!-- format for console output of precice -->
  <log>
    <sink type="stream" output="stdout"  filter='(%Severity% >= debug) and (not (%Function% = "advance"))' format="\033[0;33m%Rank% [precice]\033[0m %ColorizedSeverity%\033[0;33m%Message%\033[0m" enabled="true" />
    <!--<sink type="stream" output="stdout"  filter='%Severity% >= debug' format="\033[0;33m%Rank% [precice]\033[0m %ColorizedSeverity%\033[0;33m%Message%\033[0m" enabled="true" />-->
    <!--<sink type="file" output="debug.log" filter= "(%Severity% >= debug)" format="%Message%" enabled="true" />	-->
  </log>

  <solver-interface dimensions="3">
    
    <!-- Data fields that are exchanged between the solvers -->
    <data:vector name="Displacement"/>
    <data:vector name="Velocity"/>
    <data:vector name="Traction"/>

    <!-- A common mesh that uses these data fields -->
    <mesh name="TendonMeshTop">
      <use-data name="Displacement"/>
      <use-data name="Velocity"/>
      <use-data name="Traction"/>
    </mesh>

    <mesh name="MuscleMeshBottom">
      <use-data name="Displacement"/>
      <use-data name="Velocity"/>
      <use-data name="Traction"/>
    </mesh>

    <!-- analogous to FSI: muscle=fluid (Dirichlet BC), tendon=structure (Neumann BC) -->

    <!-- Represents each solver using preCICE. In a coupled simulation, two participants have to be
         defined. The name of the participant has to match the name given on construction of the
         precice::SolverInterface object used by the participant. -->
    
    <participant name="MuscleSolver">
      <!-- Makes the named mesh available to the participant. Mesh is provided by the solver directly. -->
      <use-mesh name="MuscleMeshBottom" provide="yes"/>
      <use-mesh name="TendonMeshTop" from="TendonSolver"/>
      
      <!-- Define input/output of the solver, the mesh should be the own one. -->
      <read-data  name="Displacement"  mesh="MuscleMeshBottom"/>
      <read-data  name="Velocity"      mesh="MuscleMeshBottom"/>
      <write-data name="Traction"      mesh="MuscleMeshBottom"/>
      <export:vtk directory="precice-output" />
      
      <!-- map from TendonMeshTop to MuscleMeshBottom -->
      <!-- shape-parameter: 
      ./rbfShape.py 0.01 3
      Using values:
        h     = 0.01
        m     = 3
        decay = 1e-09
      Result:
        s = 151.74271293851464
      -->
      <!-- <mapping:rbf-gaussian 
        direction="read" 
        from="TendonMeshTop" 
        to="MuscleMeshBottom" 
        constraint="consistent" 
        timing="initial" 
        shape-parameter="151.74"
      />-->
     <!-- <mapping:rbf-compact-polynomial-c6
        direction="read" 
        from="TendonMeshTop" 
        to="MuscleMeshBottom" 
        constraint="consistent" 
        timing="initial" 
        support-radius="0.1"  
      />  --><!-- spacing between nodes is 0.01 -->
      
      <mapping:rbf-gaussian 
        direction="read" 
        from="TendonMeshTop" 
        to="MuscleMeshBottom" 
        constraint="consistent" 
        timing="initial" 
        shape-parameter="91.05"
      />
      
      <!-- available mappings:
        rbf-thin-plate-splines
        rbf-multiquadrics
        rbf-inverse-multiquadrics
        rbf-volume-splines
        rbf-gaussian
        rbf-compact-tps-c2
        rbf-compact-polynomial-c0
        rbf-compact-polynomial-c6
        nearest-neighbor
        nearest-projection
      -->

      <!--<mapping:nearest-neighbor 
        direction="read" from="PartitionedFibersMesh" to="MuscleContractionMesh" constraint="consistent" timing="initial"/>-->
      <!--
      rbf is very slow!
      <mapping:rbf-thin-plate-splines
        direction="read" 
        from="PartitionedFibersMesh" 
        to="MuscleContractionMesh" 
        constraint="consistent" 
        />-->
      
      <!-- rbf-compact-tps-c2 abgeschnittene splines, 3-5 Nachbarn im support radius--> 
      <!--<mapping:rbf-compact-polynomial-c6
        direction="read" 
        from="PartitionedFibersMesh" 
        to="MuscleContractionMesh" 
        constraint="consistent" 
        support-radius="0.1"
      />-->
      
    </participant>

    <participant name="TendonSolver">
      
      <!-- Makes the named mesh available to the participant. Mesh is provided by the solver directly. -->
      <use-mesh name="TendonMeshTop" provide="yes"/>
      <use-mesh name="MuscleMeshBottom" from="MuscleSolver"/>
      <export:vtk directory="precice-output" />
      
      <!-- Define input/output of the solver, the mesh should be the own one.  -->
      <write-data name="Displacement"  mesh="TendonMeshTop"/>
      <write-data name="Velocity"      mesh="TendonMeshTop"/>
      <read-data  name="Traction"      mesh="TendonMeshTop"/>

      <!-- rbf to map from MuscleMeshBottom to TendonMeshTop -->
      <!--
$./rbfShape.py 0.01 5
Using values:
  h     = 0.01
  m     = 5
  decay = 1e-09
Result:
  s = 91.0456277631
-->
      <mapping:rbf-gaussian 
        direction="read" 
        from="MuscleMeshBottom" 
        to="TendonMeshTop" 
        constraint="consistent" 
        timing="initial" 
        shape-parameter="50"
      />
      
      <!--<mapping:nearest-neighbor direction="read" from="MuscleMeshBottom" to="TendonMeshTop" constraint="consistent" />-->
      <!-- rbf-compact-tps-c2 abgeschnittene splines, 3-5 Nachbarn im support radius--> 
      <!-- <mapping:rbf-thin-plate-splines
        direction="read" 
        from="MuscleMeshBottom" 
        to="TendonMeshTop" 
        constraint="consistent" 
        />-->
    
    </participant>
    
    <!-- Communication method, use TCP sockets, Change network to "ib0" on SuperMUC -->
    <m2n:sockets from="MuscleSolver" to="TendonSolver" network="lo" />

    <!-- serial-implicit coupling scales only the displacements, which are transferred from muscle to tendon -->
    <!-- parallel-implicit coupling scales displacements and tractions -->
    <!-- see https://github.com/precice/precice/wiki/Acceleration-Configuration -->
    <coupling-scheme:serial-implicit>
      <participants first="TendonSolver" second="MuscleSolver"/>
      <max-time value="1000.0"/>           <!-- end time of the whole simulation -->
      <time-window-size value="1"/>   <!-- timestep width for coupling -->
      
      <!--<absolute-convergence-measure limit="0.1" data="Displacement" mesh="TendonMeshTop" />-->
      <relative-convergence-measure limit="0.01" data="Displacement" mesh="TendonMeshTop" />
      <!--<min-iteration-convergence-measure min-iterations="{integer}" data="{string}" mesh="{string}" strict="0" suffices="0"/>-->
        
      <!--<acceleration:constant>
        <relaxation value="0.5"/>
      </acceleration:constant>-->
      
      <!-- Aitken under-relaxation adapts the under-relaxation factor in every iteration based on current residuals of the defined primary data -->
      <!--
      <acceleration:aitken>
        <data name="Displacement" mesh="TendonMeshTop"/>
        <initial-relaxation value="0.1"/>
      </acceleration:aitken>
      -->
      
      <exchange data="Displacement"    mesh="TendonMeshTop"    from="TendonSolver" to="MuscleSolver"/>
      <exchange data="Velocity"        mesh="TendonMeshTop"    from="TendonSolver" to="MuscleSolver"/>
      <exchange data="Traction"        mesh="MuscleMeshBottom" from="MuscleSolver" to="TendonSolver"/>  <!--initialize="true"-->
    </coupling-scheme:serial-implicit>
    
  </solver-interface>
</precice-configuration>
