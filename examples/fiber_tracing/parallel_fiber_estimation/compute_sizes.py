#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Script that computes the expected number of fibers that will be generated by the algorithm, given parameters m and l.
# arguments: <m> <l>
#

import sys, os
import numpy as np

def output_size(m,l,nel=4):
  """
  Output the expected number of generated fibers and the filesizes, for both files with and without boundary fibers.
  :param m: number of fine grid fibers
  :param l: maximum recursion level
  :param n: number of elements in x direction
  """

  nx = 2**l  # number of processes per coordinate direction
  p = nx**3

  # format file size: https://stackoverflow.com/a/1094933/10290071
  def sizeof_fmt(num, suffix='B'):
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
      if abs(num) < 1024.0:
        return "%3.1f %s%s" % (num, unit, suffix)
      num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)

  if nel%2 == 1:
    print("Note, nel={} is odd, changing to {}.".format(nel,nel+1))
    nel += 1

  # with boundary points
  # -------------------
  # number of fibers total
  n = 2*nel*nx*(1+m)+1
  N = n**2

  filesize = 72 + N*1481*3*8
   
  # without boundary points
  # -------------------
  # number of fibers total
  n2 = 2*nel*nx*(1+m)-1
  N2 = n2**2

  filesize2 = 72 + N2*1481*3*8
   
  print("Expected sizes for parameters m={}, lmax={}, nel={}, needs {} process{}:\n  {} x {} = {} fibers, filesize = {} ({}),\n  {} x {} = {} fibers, filesize = {} ({})".
    format(m, l, nel, p, "es" if p > 1 else "", n, n, N, filesize, sizeof_fmt(filesize), n2, n2, N2, filesize2, sizeof_fmt(filesize2)))

if __name__ == "__main__":

  if len(sys.argv) == 3:
    m = (int)(sys.argv[1])
    l = (int)(sys.argv[2])
    n = 4
    output_size(m,l,n)
  elif len(sys.argv) == 4:
    m = (int)(sys.argv[1])
    l = (int)(sys.argv[2])
    n = (int)(sys.argv[3])
    output_size(m,l,n)
  else:
    print("usage: ./compute_sizes.py <m> <lmax> [<n>]\n  where m = number of fine grid fibers,\n        lmax = maximum recursion level,\n        n = number of elements in x and y coordinate directions (default: 4)")
    sys.exit(0)
