# SConstruct file to include for a program that uses the opendihu library
#
# In a directory where you have the sources for your user program, place a SConstruct file with the following contents:
##--------------------------------------------------------------------------------------------------------
## import os
##
## # get the directory where opendihu is installed (the top level directory of opendihu)
## opendihu_home = os.environ.get('OPENDIHU_HOME')
## 
## # set path where the "SConscript" file is located (set to current path)
## path_where_to_call_sconscript = Dir('.').srcnode().abspath
## 
## # call general SConstruct that will configure everything and then call SConscript at the given path
## SConscript(os.path.join(opendihu_home,'SConstructGeneral'), 
##            exports={"path": path_where_to_call_sconscript})
##
##--------------------------------------------------------------------------------------------------------
#
import os
import sys
import random
import socket

sys.path.append("dependencies/scons-config/dist/scons_config-0.1-py2.7.egg")     # load scons_config

import sconsconfig
from sconsconfig import packages, tools

# import the path where a SConstruct should be called at the end
Import("path")
path_where_to_call_sconscript = path

opendihu_home = Dir('.').srcnode().abspath  # opendihu home directory is where this file is located

#
# Select the packages we want to use in the configuration.
#
sconsconfig.select(
    packages.MPI(required=True),     # This searches for the MPI implementation
    packages.LAPACK(required=True),  # This downloads and compiles OpenBLAS which implements the interfaces of both LAPACK and BLAS
    #packages.bison(required=False),   # parser generater needed by PTScotch which is needed by MUMPS which is needed by Petsc
    #packages.flex(required=False),    # "Fast Lexical Analyzer" needed by PTScotch which is needed by MUMPS which is needed by Petsc
    packages.PETSc(required=True),   # Petsc depends on LAPACK/BLAS and bison
    #packages.bzip2(required=False),
    packages.Python(required=True),  # This compiles python 3.6 from source to be able to embedd the python interpreter in opendihu. All further python packages are installed in this installation tree under dependencies/python/install
    packages.pythonPackages(required=False),   # all further python utils that can be installed via pip
    packages.Base64(required=True),  # Base64 is an encoding library that is needed for binary VTK output.
    packages.googletest(required=False),   # This is the testing framework.
    #packages.libxml2(required=True),
    #packages.Sphinx(required=True),
    #packages.libcellml(required=True),          # relies on libxml2 and SWIG
    packages.SEMT(required=False),           # This is a small C++ symbolic differentiation toolbox that is used for solid mechanics.
    packages.MegaMol(required=False),       # Adds the MegaMol visualization framework
    packages.ADIOS(required=False),       # ADIOS
    packages.EasyLoggingPP(required=True),      # This is the logging library, it has to be the last package to be included because it contains a source (.c) file that needs to be compiled and linked to opendihu and somehow otherwise scons-config does not work.
)

# By default set the packages' location to the dependency directory. This can be overridden in 'user-variables.scons.py'.
# Note that an absolute path has to be given, otherwise there are problems finding the libraries

#preset_variables = {'LAPACK_DIR': os.path.join(opendihu_home, 'dependencies/lapack/install'),
#                    'PETSC_DIR':  os.path.join(opendihu_home, 'dependencies/petsc/install')}


# read variables from user file 'user-variables.scons.py' and from command line arguments, e.g. `scons BUILD_TYPE=release`
variables = ARGUMENTS.copy()        # command line arguments are in the global ARGUMENTS dictionary
#variables.update(preset_variables)  # merge in preset_variables dictionary
vars = Variables(['user-variables.scons.py','../user-variables.scons.py'], variables)

# specify type and default value for recognized variables
vars.Add(EnumVariable('BUILD_TYPE', 'The build type, according to that different compiler options will be set. '\
                      '(Shortcuts: ''d'',''r'',''rd''=''dr'', ''p'')', 'release', 
                      allowed_values=('debug', 'release', 'releasewithdebuginfo', 'preprocess'), ignorecase = 2, 
                      map={'d':'debug', 'r':'release', 'rd':'releasewithdebuginfo', 'dr':'releasewithdebuginfo', 'p':'preprocess'}))
vars.Add(BoolVariable('no_tests', 'Do not compile and run tests.', 0))
vars.Add(BoolVariable('no_examples', 'Do not compile examples.', 0))
vars.Add(BoolVariable('USE_CRAY_PAT', 'Compile with craypat regions.', False))
vars.Add(BoolVariable('USE_HPL', 'Compile with -hpl option.', False))
vars.Add(BoolVariable('USE_MEGAMOL', 'Use additional linker flags to link to the megamol source file.', False))
if socket.gethostname() != 'cmcs09':
  vars.Add('mpiCC', help='The mpic++ compiler wrapper', default='mpic++')
  vars.Add('cc', help='The c compiler', default='gcc')
  vars.Add('CC', help='The c++ compiler', default='g++')
else:
  vars.Add('mpicc', help='The mpicc compiler wrapper', default='/usr/local/home/kraemer/offloading/pgi_gcc7.2.0/linux86-64/2018/mpi/openmpi-2.1.2/bin/mpicc')
  vars.Add('mpiCC', help='The mpic++ compiler wrapper', default='/usr/local/home/kraemer/offloading/pgi_gcc7.2.0/linux86-64/2018/mpi/openmpi-2.1.2/bin/mpic++')
  vars.Add('cc', help='The c compiler', default='pgcc')
  vars.Add('CC', help='The c++ compiler', default='pgc++')
vars.Add('cmake', help='The cmake executable', default='cmake')
    
# Add options from any packages we want to use.
sconsconfig.add_options(vars)

# initialize environment object containing build system settings such as compilers and flags
# command line options are considered
env = Environment(tools = ['default'], toolpath = ['config/tools'], variables = vars, ENV = os.environ)
vars.Save('out.py',env)

# check for unknown variables and output warning
unknown = vars.UnknownVariables()
if unknown:
  print "WARNING: Unknown variables from command line arguments or config file 'user-variables.scons.py':", unknown.keys()
    
# generate help text for the page `scons -h`
Help(vars.GenerateHelpText(env))

# set console messages for compilation and linking
tty_available = True
try:
  screen = open('/dev/tty', 'w')
except:
  tty_available = False
if ARGUMENTS.get('VERBOSE') != '1' and tty_available:
  env['CXXCOMSTR'] = "\x1b[32mCompiling $SOURCE\x1b[0m"
  env['CCCOMSTR'] = "\x1b[32mCompiling $SOURCE\x1b[0m"
  env['ASCOMSTR'] = "\x1b[32mAssembling $TARGET\x1b[0m"
  env['LINKCOMSTR'] = "\x1b[32mLinking   $TARGET\x1b[0m"
  env['ARCOMSTR'] = "\x1b[36mBuilding archive $TARGET\x1b[0m"
  env['RANLIBCOMSTR'] = "\x1b[36mCreating archive index\x1b[0m"
           
# set compiler, "CC" is C++, "cc" is C
env['CXX'] = env['CC']
env['CC'] = env['cc']
if not 'cmake' in env:
  env['cmake'] = 'cmake'

# Create configuration environment, passing the set of custom tests.
sconf = env.Configure(custom_tests=sconsconfig.custom_tests)

# Run custom tests with any options needed.
sconsconfig.check(sconf)

# Finish the configuration and save it to file.
sconf.Finish()

# disable unit tests on hazel hen
if os.environ.get("PE_ENV") is not None:  # if on hazelhen
  env['no_tests'] = True

# -----------------------------------------------
# progress display e.g. [ 50%]

# set needed global variables
env["node_count"] = 0                                         # current counter of nodes to compile
env["node_count_max"] = 0                                     # maximum number of nodes to compile that was determined earlier
env["node_count_interval"] = 1                                # the interval in which the progress output should be updated
node_count_fname = str(env.Dir('#')) + '/.scons_node_count'   # filename of the stored maximum node count
env["node_count_fname"]=node_count_fname

def progress_function(node):
  """ function to be called before a new node is compiled, outputs progress information like [ 50%] if it is <=100%"""
  global env
  env["node_count"] += env["node_count_interval"]
  if env["node_count"] > env["node_count_max"]: env["node_count_max"] = 0
  if env["node_count_max"]>0 and tty_available:
    sys.stdout.write('\r[%3d%%] ' % (env["node_count"]*100/env["node_count_max"]))
    sys.stdout.flush()
  # write out 
  try:
    with open(env["node_count_fname"], 'w') as f: f.write('%d\n' % env["node_count"])
  except: pass

# read in maximum node count from an earlier compilation
try:
  with open(env["node_count_fname"]) as f: env["node_count_max"] = int(f.readline())
except: pass

# add progress display target
Progress(progress_function, interval=env["node_count_interval"])

# add notification when compilation is complete
if os.environ.get("PE_ENV") == None:
  notify = env.Command(target='notify-send'+str(random.random()), source = None, action = 'notify-send "compilation complete" || true')
  AlwaysBuild('notify-send')
    
# -----------------------------------------------
# Depending on the variable BUILD_TYPE either build with debug, releasewithdebuginfo or release settings and link corresponding version of core
# All the flags may only work with the GCC compiler, tested with GCC 5.4.0 and GCC 7.3.0. 
# When using a different compiler that supports C++14, add some 'if's to the next section.

if env["BUILD_TYPE"] == "debug":
  # debug build
  variant_dir = os.path.join(path_where_to_call_sconscript,"build_debug")           # output folder for build
  if socket.gethostname() != 'cmcs09':
    env.MergeFlags('-ftemplate-backtrace-limit=0 -fstack-check')
    env.MergeFlags('-Wall -Wpedantic -Wno-sign-compare -Wno-error=sign-compare')
    env.MergeFlags('-DDEBUG -ggdb3 -g3 -Og -pg  -DELPP_FEATURE_CRASH_LOG')   # gcc flags, will be sorted automatically into linker and compiler flags
  else: # using pgi compiler here:
    env.MergeFlags('-O0 -g -ta=host,tesla:cc60,time -Minfo=accel -noswitcherror -std=c++14 -DELPP_FEATURE_CRASH_LOG -laccg -laccapi -laccn -laccg2 -lcudadevice')
    env.MergeFlags('-DDEBUG')
  if not env["USE_MEGAMOL"]:
    env.MergeFlags('-Werror')
  env.Append(LIBPATH = [os.path.join(opendihu_home, 'core/build_debug')])   # add debug version of opendihu library
  env.Prepend(LIBS = ['opendihud'])

elif env["BUILD_TYPE"] == "releasewithdebuginfo":
  # release with debug info build
  variant_dir = os.path.join(path_where_to_call_sconscript,'build_release_with_debug_info')         # folder of build
  env.MergeFlags('-DDEBUG -O2 -ggdb3 -g3 -pg')   # gcc flags, will be sorted automatically into linker and compiler flags
  env.Append(LIBPATH = [os.path.join(opendihu_home, 'core/build_release_with_debug_info')])   # add release with debug info version of opendihu library
  env.Prepend(LIBS = ['opendihurd'])

elif env["BUILD_TYPE"] == "preprocess":
  # only the preprocessing step
  variant_dir = os.path.join(path_where_to_call_sconscript,'preprocess')         # output folder for build
  env.MergeFlags('-DDEBUG -O2 -ggdb3 -g3 -DELPP_DISABLE_DEBUG_LOGS -DELPP_DISABLE_VERBOSE_LOGS -DELPP_DISABLE_TRACE_LOGS -E -C -P ')   # gcc flags, will be sorted automatically into linker and compiler flags

else:
  # release build
  variant_dir = os.path.join(path_where_to_call_sconscript,'build_release')         # output folder for build
  env.Append(LIBPATH = [os.path.join(opendihu_home, 'core/build_release')])   # add release version of opendihu library
  env.Prepend(LIBS = ['opendihu'])
  if socket.gethostname() == 'cmcs09':
    env.MergeFlags('-DNDEBUG')
  else:
    env.MergeFlags('-DELPP_DISABLE_DEBUG_LOGS -DELPP_DISABLE_VERBOSE_LOGS -DELPP_DISABLE_TRACE_LOGS -DNDEBUG')
  if os.environ.get("PE_ENV") == "CRAY":
    env.MergeFlags('-O3')   # fastest with cray (same performance as -02)
  elif socket.gethostname() == 'cmcs09':
    env.MergeFlags('-g -O3 -fastsse -Mvect=simd -noswitcherror -std=c++14 -acc -ta=host,tesla:managed,cc35,cc60,time,cuda10.0 -laccg -laccapi -laccn -laccg2 -lcudadevice')
    #env.MergeFlags('-fastsse -g -noswitcherror -std=c++14 -Mvect=simd -acc -ta=host,tesla:cc60,time -Minfo=accel -laccg -laccapi -laccn -laccg2 -lcudadevice')
    #env.MergeFlags('-g -noswitcherror -std=c++14') # managed,
  else:
    env.MergeFlags('-Ofast')   # fastest with GNU and Intel
  
  if env["USE_CRAY_PAT"]:
    print("USE_CRAY_PAT=True: Compiling with -DHAVE_PAT (uses PAT_region_begin())\n")
    env.Append(CPPDEFINES = "-DHAVE_PAT")
    if os.environ.get("PE_ENV") != "CRAY":
      env.MergeFlags('-finstrument-functions')   # instrument functions for pat_run,  works with GNU and Intel

# flags to always include, except with cray compiler
if os.environ.get("PE_ENV") != "CRAY" and "pg" not in env["cc"]:
  env.MergeFlags('-Wunused-variable')   # always warn about unused variables
  env.MergeFlags('-std=c++14 -fopenmp -march=native')

if os.environ.get("PE_ENV") == "CRAY" and env["USE_HPL"]:
  print("USE_HPL=True: Compiling with -hpl option\n")
  env.MergeFlags('-hpl={}/opendihu.pl'.format(opendihu_home))

# add basic linker flags for linux
env.MergeFlags("-lpthread -ldl -lutil -lm")

# add defines that are used in the code
env.Append(CPPDEFINES = {'-DOPENDIHU_HOME': '\\"'+str(opendihu_home)+'\\"'})   # add define of the directory where this file is located
env.Append(CPPDEFINES = {'-DC_COMPILER_COMMAND': '\\"'+env["CC"]+'\\"'})   # add compile command, e.g. gcc
env.Append(CPPDEFINES = {'-DCPP_COMPILER_COMMAND': '\\"'+env["CXX"]+'\\"'})   # add compile command, e.g. g++
if socket.gethostname() == 'cmcs09':
  env.Append(CPPDEFINES = {'-DMPI_C_COMPILER_COMMAND': '\\"/usr/local/home/kraemer/offloading/pgi_gcc7.2.0/linux86-64/2018/mpi/openmpi-2.1.2/bin/mpicc\\"'})
  env.Append(CPPDEFINES = {'-DMPI_CPP_COMPILER_COMMAND': '\\"/usr/local/home/kraemer/offloading/pgi_gcc7.2.0/linux86-64/2018/mpi/openmpi-2.1.2/bin/mpic++\\"'})  

env.Append(CPPDEFINES = "-DELPP_NO_DEFAULT_LOG_FILE")  # disable creation of the "myeasylog.log" default log file

# Set the include path for header files
env.Append(CPPPATH = [os.path.join(opendihu_home, 'core/src')])

#print(env.Dump())
# output compilers
if "mpiCC" in env:
  print("Compilers: C: {}, C++: {}, MPI: {}".format(env['CC'],env['CXX'],env['mpiCC']))
else:
  print("Compilers: C: {}, C++: {}, MPI: -- ".format(env['CC'],env['CXX']))

# call SConscript file for the actual build in the specified build directory variant_dir
SConscript(dirs=path_where_to_call_sconscript,
           variant_dir=variant_dir,
           duplicate=False,
           exports="env")

