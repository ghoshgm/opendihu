
include(CheckIncludeFile)
include(CheckIncludeFileCXX)
include(CheckSymbolExists)
include(CheckCXXSymbolExists)
include(ProcessorCount)
include(CheckTypeSize)

# Generic routine to set appropriate cores for all tests.
# Typically the tests are executed with maximum 2 cores.
cmake_host_system_information(RESULT Ncpu QUERY NUMBER_OF_PHYSICAL_CORES)
if(Ncpu LESS 2)
  ProcessorCount(n)
  if(n GREATER Ncpu)
    set(Ncpu ${n})
  endif()
  set(MPIEXEC_NUMPROC_MAX 1)
else()
  set(MPIEXEC_NUMPROC_MAX 2)
endif()

check_type_size(int SIZEOF_INT)
check_type_size(long SIZEOF_LONG)
check_type_size("long long" SIZEOF_LONG_LONG)
check_type_size(uint32_t SIZEOF_UINT32_T)
check_type_size(uint64_t SIZEOF_UINT64_T)
check_type_size(int32_t SIZEOF_INT32_T)
check_type_size(int64_t SIZEOF_INT64_T)
check_type_size(float SIZEOF_FLOAT)
check_type_size(double SIZEOF_DOUBLE)
check_type_size(void* SIZEOF_VOIDPTR)
check_type_size(int* SIZEOF_INTPTR)

if(${MPI_FOUND})
  set(CMAKE_REQUIRED_LIBRARIES MPI::MPI_CXX)
  check_include_file(mpi.h HAVE_MPI_H)
endif()

if(${ZLIB_FOUND})
  set(CMAKE_REQUIRED_LIBRARIES ZLIB::ZLIB)
  check_include_file(zlib.h HAVE_ZLIB_H)
endif()

if(${Python3_FOUND})
  set(CMAKE_REQUIRED_INCLUDES ${Python3_INCLUDE_DIRS})
  set(CMAKE_REQUIRED_LIBRARIES ${Python3_LIBRARIES})
  check_include_file(Python.h HAVE_PYTHON_H)
endif()

if(${precice_FOUND})
  set(CMAKE_REQUIRED_LIBRARIES precice::precice)
  check_include_file_cxx(SolverInterface.hpp HAVE_PRECICE)
endif()

if(${OpenBLAS_FOUND})
  set(CMAKE_REQUIRED_INCLUDES ${OpenBLAS_INCLUDE_DIRS})
  set(CMAKE_REQUIRED_LIBRARIES ${OpenBLAS_LIBRARIES})
  check_include_file(lapacke.h HAVE_LAPACKE_H)
  check_include_file(lapack.h HAVE_LAPACK_H)
  check_include_file(cblas.h HAVE_BLAS_H)
endif()

if(${MPI_FOUND})
  set(CMAKE_REQUIRED_LIBRARIES MPI::MPI_CXX)
  check_symbol_exists(MPI_Put mpi.h USE_MPI_PUT)
  check_symbol_exists(MPI_Win_lock mpi.h USE_MPI_WIN_LOCK)
  check_symbol_exists(MPI_Win_free mpi.h USE_MPI_WIN_FREE)
  check_symbol_exists(MPI_Win_unlock mpi.h USE_MPI_WIN_UNLOCK)
  check_symbol_exists(MPI_Win_create mpi.h USE_MPI_WIN_CREATE)
  check_symbol_exists(MPI_Win_allocate_shared mpi.h USE_MPI_ALLOC)
endif()

set(NESTED_MAT 0)
set(XBRAID 0)
set(SIMD 0)
set(NDEBUG 0)
set(PAT 0)
set(EXTRAE 0)
set(CHASTE 0)
set(OPENCOR 0)
set(MEGAMOL 0)
